<?xml version="1.0" ?>

<!--
  build.xml - generic JPF extension build script
              using Ant (http://jakarta.apache.org/ant)
  public targets:

    compile           compile JPF and its specific (modeled) environment libraries
    test              run all JPF tests
    jar               build JPF jar files
    dist              build binary distribution
    clean             remove the files that have been generated by the build process
-->

<project name="badger" default="build" basedir=".">

  <!-- ========================== COMMON SECTION ========================== -->

  <!--
    local props have to come first, because Ant properties are immutable
    NOTE: this file is local - it is never in the repository!
  -->
  <property file="local.properties"/>
  <property environment="env"/>

  <!-- this is where we get the 'jpf-core' location from -->
  <property file="${user.home}/.jpf/site.properties"/>

  <!-- add dependencies on other jpf projects, e.g. on jpf-symbc -->
  <property file="${jpf-symbc}/jpf.properties"/>

  <!-- get the jpf-core path properties -->
  <property file="${jpf-core}/jpf.properties"/>

  <!-- compiler settings -->
  <property name="src_level"     value="8"/>
  <property name="debug"         value="on"/>
  <property name="deprecation"   value="on"/>


  <!-- generic classpath settings -->
  <path id="lib.path">

    <!-- add in what we need from symbc -->
    <pathelement path="${jpf-symbc.native_classpath}"/>
    <fileset dir="${jpf-symbc}">
      <include name="build/*.jar"/>
    </fileset>

    <!-- add in what we need from the core -->
    <pathelement path="${jpf-core.native_classpath}"/>

    <!-- our own classes and libs come first -->
    <pathelement location="build/main"/>
    <pathelement location="build/examples"/>
    <fileset dir=".">
  	  <include name="lib/*.jar"/>
    </fileset>

  </path>

  <!-- init: common initialization -->
  <target name="-init">
    <tstamp/>

    <mkdir dir="build"/>               <!-- the build root -->

    <!-- the things that have to be in the classpath of whatever runs Ant -->
    <available property="have_javac" classname="com.sun.tools.javac.Main"/>
    <fail unless="have_javac">no javac found</fail>

    <available file="src/main"        type="dir" property="have_main"/>
    <available file="src/examples"    type="dir" property="have_examples"/>

    <fail unless="have_main">no src/main</fail>
    <fail unless="have_examples">no src/examples</fail>

  </target>

  <!-- ======================= COMPILE SECTION ============================= -->

  <!-- public compile -->
  <target name="compile" depends="-init,-compile-main,-compile-examples"
          description="compile all JPF core sources" >
  </target>

  <target name="-compile-main" if="have_main" >
    <mkdir dir="build/main"/>
    <javac srcdir="src/main" destdir="build/main"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}"
           classpathref="lib.path"/>
  </target>

  <target name="-compile-examples" if="have_examples" depends="-compile-main">
    <mkdir dir="build/examples" />
    <javac srcdir="src/examples" destdir="build/examples"
           debug="${debug}" source="${src_level}" deprecation="${deprecation}">
       <classpath>
         <path refid="lib.path"/>
       </classpath>
    </javac>
  </target>

  <!-- ======================= MISC SECTION ================================ -->

  <!-- build jars -->
  <target name="build" depends="compile,-jar-jvm"
          description="generate the ${ant.project.name} jar files" >
  </target>

  <target name="-jar-jvm">
    <jar jarfile="build/${ant.project.name}.jar">
      <fileset dir="build/main" erroronmissingdir="false"/>
      <fileset dir="build/examples" erroronmissingdir="false"/>
    </jar>
  </target>

  <!-- public clean: cleanup from previous tasks/builds -->
  <target name="clean">
    <delete dir="build" />
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no" />
      <fileset dir="." includes="**/*.bak" defaultexcludes="no" />
      <fileset dir="." includes="**/error.xml" />
    </delete>
  </target>


  <!-- Build Runner Jar File for Badger -->
  <target name="-run-jar">
      <jar destfile="build/BadgerRunnerJar.jar" filesetmanifest="mergewithoutmain">
          <manifest>
              <attribute name="Main-Class" value="edu.cmu.sv.badger.app.BadgerRunner"/>
              <attribute name="Class-Path"
                value="yicesapijava.jar
                  string.jar
                  solver.jar
                  scale.jar
                  org.sat4j.pb.jar
                  org.sat4j.core.jar
                  opt4j-2.4.jar
                  libcvc3.jar
                  ibcvc3-5.0.0.jar
                  jedis-2.0.0.jar
                  jaxen.jar
                  iasolver.jar
                  hampi.jar
                  green.jar
                  grappa.jar
                  coral.jar
                  commons-math-1.2.jar
                  commons-lang-2.4.jar
                  com.microsoft.z3.jar
                  choco-solver-2.1.1-20100709.142532-2.jar
                  choco-1_2_04.jar
                  bcel-6.3.jar
                  automaton.jar
                  aima-core.jar
                  Statemachines.jar
                  STPJNI.jar
                  JSAP-2.1.jar
                  jpf-symbc.jar
                  jpf-symbc-classes.jar
                  jpf-symbc-annotations.jar
                  jpf.jar
                  jpf-classes.jar
                  jpf-annotations.jar
                  classloader_specific_tests.jar
                  RunTest.jar
                  RunJPF.jar
                  commons-lang3-3.8.1.jar
                  commons-io-2.6.jar
                  asm-5.2.jar
                  CFGAnalysis.jar
                  badger.jar" />
          </manifest>
          <zipfileset dir="${badger}/build" includes="*.jar" excludes="BadgerRunnerJar.jar"/>
          <zipfileset dir="${badger}/lib" includes="*.jar"/>
          <zipfileset dir="${jpf-symbc}/build" includes="*.jar"/>
          <zipfileset dir="${jpf-symbc}/lib" includes="*.jar"/>
          <zipfileset dir="${jpf-core}/build" includes="*.jar"/>
      </jar>
  </target>


</project>
